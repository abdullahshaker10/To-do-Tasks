{"version":3,"sources":["logo.svg","components/task.jsx","components/tasks.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Task","state","key","this","props","task","id","className","style","flex","onClick","stikeUnstrike","completed","title","handelEdit","handelDelete","Component","Tasks","tasks","map","App","todoList","activeItem","editing","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","fetchTasks","console","log","fetch","then","response","json","data","setState","handelChange","e","target","value","handelSubmit","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","onSubmit","type","placeholder","onChange","is","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3034b81a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, Fragment } from \"react\";\n\nclass Task extends Component {\n  state = {};\n  render() {\n    return (\n      <Fragment>\n        <div key={this.props.task.id} className=\"task-wrapper flex-wrapper\">\n          <div\n            style={{ flex: 7 }}\n            onClick={() => this.props.stikeUnstrike(this.props.task)}\n          >\n            {this.props.task.completed == false ? (\n              <span>{this.props.task.title}</span>\n            ) : (\n              <strike>{this.props.task.title}</strike>\n            )}\n          </div>\n\n          <div style={{ flex: 1 }}>\n            <button\n              className=\"btn btn-sm btn-outline-info\"\n              onClick={() => this.props.handelEdit(this.props.task)}\n            >\n              Edit\n            </button>\n          </div>\n\n          <div style={{ flex: 1 }}>\n            <button\n              className=\"btn btn-sm btn-outline-dark delete\"\n              onClick={() => this.props.handelDelete(this.props.task)}\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Task;\n","import React, { Component, Fragment } from \"react\";\nimport Task from \"./task\";\n\nclass Tasks extends Component {\n  render() {\n    let tasks = this.props.tasks;\n    return (\n      <Fragment>\n        {tasks.map((task) => (\n          <Task\n            stikeUnstrike={this.props.stikeUnstrike}\n            handelEdit={this.props.handelEdit}\n            handelDelete={this.props.handelDelete}\n            task={task}\n          />\n        ))}\n      </Fragment>\n    );\n  }\n}\n\nexport default Tasks;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { Component } from \"react\";\nimport Tasks from \"./components/tasks\";\n\nclass App extends Component {\n  state = {\n    todoList: [],\n    activeItem: {\n      id: null,\n      title: \"\",\n      completed: false,\n    },\n    editing: false,\n  };\n  getCookie = (name) => {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== \"\") {\n      var cookies = document.cookie.split(\";\");\n      for (var i = 0; i < cookies.length; i++) {\n        var cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === name + \"=\") {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  };\n  componentDidMount() {\n    this.fetchTasks();\n  }\n  fetchTasks = () => {\n    console.log(\"fetching...\");\n\n    fetch(\"http://127.0.0.1:8000/api/tasks/\")\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          todoList: data,\n        })\n      );\n  };\n  handelChange = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n    this.setState({\n      activeItem: {\n        ...this.state.activeItem,\n        title: value,\n      },\n    });\n  };\n  handelSubmit = (e) => {\n    e.preventDefault();\n    var csrftoken = this.getCookie(\"csrftoken\");\n    let url = \"http://127.0.0.1:8000/api/tasks/create/\";\n\n    if (this.state.editing) {\n      url =\n        \"http://127.0.0.1:8000/api/tasks/update/\" + this.state.activeItem.id;\n      this.setState({\n        editing: false,\n      });\n\n      fetch(url, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"X-CSRFToken\": csrftoken,\n        },\n        body: JSON.stringify(this.state.activeItem),\n      }).then((response) => {\n        this.fetchTasks();\n        this.setState({\n          activeItem: {\n            id: null,\n            title: \"\",\n            completed: false,\n          },\n        });\n      });\n      return;\n    }\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify(this.state.activeItem),\n    }).then((response) => {\n      this.fetchTasks();\n      this.setState({\n        activeItem: {\n          id: null,\n          title: \"\",\n          completed: false,\n        },\n      });\n    });\n  };\n\n  handelDelete = (task) => {\n    var csrftoken = this.getCookie(\"csrftoken\");\n    let url = \"http://127.0.0.1:8000/api/tasks/delete/\";\n\n    url = url + task.id;\n\n    fetch(url, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n    }).then((response) => {\n      this.fetchTasks();\n    });\n  };\n  handelEdit = (task) => {\n    this.setState({\n      activeItem: task,\n      editing: true,\n    });\n  };\n\n  stikeUnstrike = (task) => {\n    task.completed = !task.completed;\n    var csrftoken = this.getCookie(\"csrftoken\");\n    let url = \"http://127.0.0.1:8000/api/tasks/update/\" + task.id;\n    fetch(url, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify({ title: task.title, completed: task.completed }),\n    }).then(() => {\n      this.fetchTasks();\n    });\n  };\n  render() {\n    let tasks = this.state.todoList;\n    return (\n      <div className=\"container\">\n        <div id=\"task-container\">\n          <div id=\"form-wrapper\">\n            <form id=\"form\" onSubmit={this.handelSubmit}>\n              <div className=\"flex-wrapper\">\n                <div style={{ flex: 6 }}>\n                  <input\n                    className=\"form-control\"\n                    id=\"title\"\n                    type=\"text\"\n                    name=\"title\"\n                    placeholder=\"Add task here\"\n                    onChange={this.handelChange}\n                    value={this.state.activeItem.title}\n                  ></input>\n                </div>\n                <div style={{ flex: 1 }}>\n                  <input\n                    id=\"submit\"\n                    className=\"btn btn-warning\"\n                    type=\"submit\"\n                    name=\"Add\"\n                    value=\"Submit\"\n                  />\n                </div>\n              </div>\n            </form>\n          </div>\n\n          <div is=\"list-wrapper\">\n            <Tasks\n              tasks={tasks}\n              stikeUnstrike={this.stikeUnstrike}\n              handelEdit={this.handelEdit}\n              handelDelete={this.handelDelete}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}